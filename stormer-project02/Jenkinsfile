PATH="stormer-project02"

pipeline {
    agent {
     label ("node1")
            }

options {
    buildDiscarder(logRotator(numToKeepStr: '20'))
    disableConcurrentBuilds()
    timeout (time: 60, unit: 'MINUTES')
    timestamps()
  }
	

    stages {
        stage('Setup parameters') {
            steps {
                script {
                    properties([
                        parameters([
                        

                             string(name: 'WARNTIME',
                             defaultValue: '0',
                            description: '''Warning time (in minutes) before starting upgrade'''),

                          string(
                                defaultValue: 'develop',
                                name: 'Please_leave_this_section_as_it_is',
                                trim: true
                            ),
                        ])
                    ])
                }
            }
        }


        //////////////////////////////////
       stage('warning') {
      steps {
        script {
            notifyUpgrade(currentBuild.currentResult, "WARNING")
            sleep(time:env.WARNTIME, unit:"MINUTES")
        }
      }
    }

    stage('Login to Nexus') {

	      steps {
	        script {
	          withCredentials([
	            string(credentialsId: 'Nexus', variable: 'PASSWORD')
	          ]) {

	            sh '''
                docker login 3.140.121.181:5001 -u admin -p  $PASSWORD
	            '''
	          }

	        }

	      }

	    }


        // stage('Test golang') {
	      // agent {
        //     docker {
        //       image '3.140.121.181:5001/golang:1.20.0'
        //       args '-u 0:0'
        //     }
        //    }
        //     steps {
        //         sh '''
        //     cd stormer-project02/src/catalog/
        //     go test
        //         '''
        //     }
        // }




      //   stage('Test maven-cart') {
	    //  agent {
      //       docker {
      //         image '3.140.121.181:5001/maven:3.8.7-openjdk-18'
      //       }
      //      }
      //       steps {
      //           sh '''
      //       cd stormer-project02/src/cart/
      //       mvn test -Dmaven.test.skip=true
      //           '''
      //       }
      //   }

        // stage('Test maven-orders') {
	      // agent {
        //     docker {
        //       image '3.140.121.181:5001/maven:3.8.7-openjdk-18'
        //     }
        //    }
        //     steps {
        //         sh '''
        //     cd stormer-project02/src/orders/
        //     mvn test -Dmaven.test.skip=true
        //         '''
        //     }
        // }

        // stage('Test maven-ui') {
	      // agent {
        //     docker {
        //       image '3.140.121.181:5001/maven:3.8.7-openjdk-18'
        //     }
        //    }
        //     steps {
        //         sh '''
        //     cd stormer-project02/src/ui/
        //     mvn test -Dmaven.test.skip=true
        //         '''
        //     }
        // }

        // stage('Test maven-node') {
	      // agent {
        //     docker {
        //       image '3.140.121.181:5001/node'
        //     }
        //    }
        //     steps {
        //         sh '''
        //     cd stormer-project02/src/checkout/
        //     npm install 
        //         '''
        //     }
        // }


    //      stage('SonarQube analysis') {
    //         agent {
    //             docker {
    //               image '3.140.121.181:5001/sonarsource/sonar-scanner-cli:4.8.0'
    //             }
    //            }
    //            environment {
    //     CI = 'true'
    //     scannerHome='/opt/sonar-scanner'
    // }
    //         steps{
    //             withSonarQubeEnv('Sonar') {
    //                 sh "${scannerHome}/bin/sonar-scanner"
    //             }
    //         }
    //     }




        stage('Build golang') {
	      agent {
            docker {
              image '3.140.121.181:5001/golang'
              args '-u 0:0'
            }
           }
            steps {
                sh '''
            cd stormer-project02/src/catalog/
            go build  -o main 
                '''
            }
        }




        stage('Build maven-cart') {
	     agent {
            docker {
              image '3.140.121.181:5001/maven:3.8.7-openjdk-18'
            }
           }
            steps {
                sh '''
            cd stormer-project02/src/cart/
            mvn package -Dmaven.test.skip=true
                '''
            }
        }

        stage('Build maven-orders') {
	      agent {
            docker {
              image '3.140.121.181:5001/maven:3.8.7-openjdk-18'
            }
           }
            steps {
                sh '''
            cd stormer-project02/src/orders/
            mvn package -Dmaven.test.skip=true
                '''
            }
        }

        stage('Build maven-ui') {
	      agent {
            docker {
              image '3.140.121.181:5001/maven:3.8.7-openjdk-18'
            }
           }
            steps {
                sh '''
            cd stormer-project02/src/ui/
            mvn package -Dmaven.test.skip=true
                '''
            }
        }





    }



post {
    always {
      script {
        notifyUpgrade(currentBuild.currentResult, "POST")
      }
    }
    
  }

}



def notifyUpgrade(String buildResult, String whereAt) {
  if (Please_leave_this_section_as_it_is == 'origin/develop') {
    channel = 'development-alerts'
  } else {
    channel = 'development-alerts'
  }
  if (buildResult == "SUCCESS") {
    switch(whereAt) {
      case 'WARNING':
        slackSend(channel: channel,
                color: "#439FE0",
                message: "Stormer: Upgrade starting in ${env.WARNTIME} minutes @ ${env.BUILD_URL}  Application Stormer")
        break
    case 'STARTING':
      slackSend(channel: channel,
                color: "good",
                message: "Stormer: Starting upgrade @ ${env.BUILD_URL} Application Stormer")
      break
    default:
        slackSend(channel: channel,
                color: "good",
                message: "Stormer: Upgrade completed successfully @ ${env.BUILD_URL}  Application Stormer")
        break
    }
  } else {
    slackSend(channel: channel,
              color: "danger",
              message: "Stormer: Upgrade was not successful. Please investigate it immediately.  @ ${env.BUILD_URL}  Application Stormer")
  }
}
