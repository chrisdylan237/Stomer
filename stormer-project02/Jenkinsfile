pipeline {
    agent {
     label ("node1")
            }

options {
    buildDiscarder(logRotator(numToKeepStr: '20'))
    disableConcurrentBuilds()
    timeout (time: 60, unit: 'MINUTES')
    timestamps()
  }
	

    stages {
        stage('Setup parameters') {
            steps {
                script {
                    properties([
                        parameters([
                        

                             string(name: 'WARNTIME',
                             defaultValue: '2',
                            description: '''Warning time (in minutes) before starting upgrade'''),

                          string(
                                defaultValue: 'develop',
                                name: 'Please_leave_this_section_as_it_is',
                                trim: true
                            ),
                        ])
                    ])
                }
            }
        }
 
        stage('Hello') {
            steps {
                sh '''
                ls 
                pwd
                '''
            }
        }
    }



post {
    always {
      script {
        notifyUpgrade(currentBuild.currentResult, "POST")
      }
    }
    
  }

}



def notifyUpgrade(String buildResult, String whereAt) {
  if (Please_leave_this_section_as_it_is == 'origin/develop') {
    channel = 'development-alerts'
  } else {
    channel = 'development-alerts'
  }
  if (buildResult == "SUCCESS") {
    switch(whereAt) {
      case 'WARNING':
        slackSend(channel: channel,
                color: "#439FE0",
                message: "Stormer: Upgrade starting in ${env.WARNTIME} minutes @ ${env.BUILD_URL}  Application Stormer")
        break
    case 'STARTING':
      slackSend(channel: channel,
                color: "good",
                message: "Stormer: Starting upgrade @ ${env.BUILD_URL} Application Stormer")
      break
    default:
        slackSend(channel: channel,
                color: "good",
                message: "Stormer: Upgrade completed successfully @ ${env.BUILD_URL}  Application Stormer")
        break
    }
  } else {
    slackSend(channel: channel,
              color: "danger",
              message: "Stormer: Upgrade was not successful. Please investigate it immediately.  @ ${env.BUILD_URL}  Application Stormer")
  }
}
